import React, { useState, useCallback, useMemo } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  Lock, 
  Search, 
  Shield, 
  AlertTriangle, 
  Database, 
  Activity, 
  Clock, 
  Download, 
  Upload, 
  Eye, 
  Zap, 
  Unlock, 
  Key, 
  Fingerprint, 
  Brain, 
  Microscope, 
  Satellite, 
  Radio, 
  Webhook, 
  Code, 
  Cloud, 
  HardDrive, 
  Network, 
  GitBranch, 
  Layers, 
  Workflow, 
  Calendar, 
  Bell, 
  User, 
  Mail, 
  Phone, 
  Home, 
  Building, 
  Car, 
  Plane, 
  Train, 
  Bus, 
  Bike, 
  ExternalLink,
  Copy,
  CheckCircle,
  XCircle,
  Info,
  FileText,
  Globe,
  Server,
  Cpu,
  Monitor,
  Smartphone,
  Tablet,
  Laptop,
  Link,
  Image,
  Video,
  Music,
  DollarSign,
  Bitcoin,
  ShoppingCart,
  Package,
  Truck,
  MapPin,
  Target,
  Crosshair,
  TrendingUp,
  BarChart3
} from 'lucide-react';

interface Vulnerability {
  id: string;
  name: string;
  cve_id: string;
  cvss_score: number;
  cvss_vector: string;
  severity: 'Critical' | 'High' | 'Medium' | 'Low' | 'Info';
  status: 'Open' | 'Fixed' | 'In Progress' | 'Wont Fix' | 'False Positive';
  description: string;
  affected_components: string[];
  affected_versions: string[];
  fixed_versions: string[];
  exploit_available: boolean;
  exploit_maturity: 'Proof of Concept' | 'Functional' | 'High' | 'Not Defined';
  disclosure_date: string;
  discovery_date: string;
  remediation_date: string;
  remediation_complexity: 'Low' | 'Medium' | 'High';
  remediation_description: string;
  references: Array<{
    url: string;
    description: string;
  }>;
  tags: string[];
  assigned_to: string;
  reporter: string;
  notes: string;
}

interface VulnerabilityAssessment {
  vulnerabilities: Vulnerability[];
  statistics: {
    total: number;
    by_severity: {
      critical: number;
      high: number;
      medium: number;
      low: number;
      info: number;
    };
    by_status: {
      open: number;
      fixed: number;
      in_progress: number;
      wont_fix: number;
      false_positive: number;
    };
    by_component: Record<string, number>;
    average_time_to_fix: number;
    oldest_open: string;
    newest: string;
  };
}

const VulnerabilityAssessmentPage: React.FC = () => {
  const [isLoading, setIsLoading] = useState(false);
  const [assessment, setAssessment] = useState<VulnerabilityAssessment | null>(null);
  const [selectedTab, setSelectedTab] = useState<'overview' | 'vulnerabilities' | 'components' | 'remediation'>('overview');
  const [selectedSeverity, setSelectedSeverity] = useState<'all' | 'critical' | 'high' | 'medium' | 'low'>('all');
  const [selectedStatus, setSelectedStatus] = useState<'all' | 'open' | 'fixed' | 'in_progress'>('all');
  const [searchQuery, setSearchQuery] = useState('');

  // Generate comprehensive vulnerability assessment data
  const generateVulnerabilityAssessment = useCallback((): VulnerabilityAssessment => {
    return {
      vulnerabilities: [
        {
          id: "VULN-2024-001",
          name: "Improper Input Validation in Wallet Address Validation",
          cve_id: "CVE-2024-12345",
          cvss_score: 8.6,
          cvss_vector: "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:N",
          severity: "High",
          status: "Fixed",
          description: "The wallet address validation function does not properly validate input, allowing attackers to bypass security checks and potentially execute arbitrary code or manipulate transaction data.",
          affected_components: ["Wallet Module", "Transaction Processor"],
          affected_versions: ["1.0.0", "1.1.0", "1.2.0"],
          fixed_versions: ["1.2.1"],
          exploit_available: true,
          exploit_maturity: "Functional",
          disclosure_date: "2024-06-15",
          discovery_date: "2024-05-20",
          remediation_date: "2024-06-30",
          remediation_complexity: "Medium",
          remediation_description: "Implement proper input validation for wallet addresses using a combination of regex pattern matching and cryptographic verification. Update the transaction processor to reject malformed addresses.",
          references: [
            {
              url: "https://nvd.nist.gov/vuln/detail/CVE-2024-12345",
              description: "NVD Entry"
            },
            {
              url: "https://example.com/security/advisory/2024-001",
              description: "Vendor Advisory"
            }
          ],
          tags: ["input-validation", "wallet", "crypto", "injection"],
          assigned_to: "Security Team",
          reporter: "Internal Security Audit",
          notes: "High priority fix due to potential financial impact. Hotfix deployed to production on 2024-06-30."
        },
        {
          id: "VULN-2024-002",
          name: "Insecure Cryptographic Storage of Private Keys",
          cve_id: "CVE-2024-23456",
          cvss_score: 9.8,
          cvss_vector: "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
          severity: "Critical",
          status: "Fixed",
          description: "Private keys are stored with insufficient encryption, making them vulnerable to extraction by attackers with access to the device storage.",
          affected_components: ["Key Management", "Wallet Module"],
          affected_versions: ["1.0.0", "1.1.0", "1.2.0", "1.2.1"],
          fixed_versions: ["1.3.0"],
          exploit_available: true,
          exploit_maturity: "High",
          disclosure_date: "2024-07-10",
          discovery_date: "2024-06-25",
          remediation_date: "2024-07-15",
          remediation_complexity: "High",
          remediation_description: "Implement secure key derivation function (PBKDF2) with high iteration count, use AES-256 for encryption, and store keys in secure hardware when available. Add integrity checks for encrypted data.",
          references: [
            {
              url: "https://nvd.nist.gov/vuln/detail/CVE-2024-23456",
              description: "NVD Entry"
            },
            {
              url: "https://example.com/security/advisory/2024-002",
              description: "Vendor Advisory"
            },
            {
              url: "https://owasp.org/www-community/attacks/Cryptographic_Storage_Insecure",
              description: "OWASP Reference"
            }
          ],
          tags: ["cryptography", "key-management", "storage", "encryption"],
          assigned_to: "Cryptography Team",
          reporter: "External Security Researcher",
          notes: "Critical vulnerability requiring immediate attention. All users advised to upgrade immediately after fix release."
        },
        {
          id: "VULN-2024-003",
          name: "Cross-Site Scripting in Transaction History",
          cve_id: "CVE-2024-34567",
          cvss_score: 6.1,
          cvss_vector: "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N",
          severity: "Medium",
          status: "Open",
          description: "The transaction history page does not properly sanitize transaction memo fields, allowing attackers to inject malicious scripts that execute when users view their transaction history.",
          affected_components: ["Web Interface", "Transaction History"],
          affected_versions: ["1.2.0", "1.2.1", "1.3.0"],
          fixed_versions: [],
          exploit_available: true,
          exploit_maturity: "Proof of Concept",
          disclosure_date: "2024-08-05",
          discovery_date: "2024-07-30",
          remediation_date: "",
          remediation_complexity: "Low",
          remediation_description: "Implement proper output encoding for all user-generated content displayed in the transaction history. Use a content security policy to prevent execution of inline scripts.",
          references: [
            {
              url: "https://nvd.nist.gov/vuln/detail/CVE-2024-34567",
              description: "NVD Entry"
            },
            {
              url: "https://owasp.org/www-community/attacks/xss/",
              description: "OWASP XSS Reference"
            }
          ],
          tags: ["xss", "web", "injection", "ui"],
          assigned_to: "Web Development Team",
          reporter: "Bug Bounty Program",
          notes: "Fix scheduled for next sprint. Temporary workaround implemented to strip HTML tags from memo fields."
        },
        {
          id: "VULN-2024-004",
          name: "Insufficient Rate Limiting on Authentication Endpoint",
          cve_id: "CVE-2024-45678",
          cvss_score: 7.5,
          cvss_vector: "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
          severity: "High",
          status: "In Progress",
          description: "The authentication API lacks proper rate limiting, allowing attackers to perform unlimited login attempts to brute force user credentials.",
          affected_components: ["Authentication Service", "API Gateway"],
          affected_versions: ["1.0.0", "1.1.0", "1.2.0", "1.2.1", "1.3.0"],
          fixed_versions: [],
          exploit_available: false,
          exploit_maturity: "Not Defined",
          disclosure_date: "2024-08-10",
          discovery_date: "2024-08-01",
          remediation_date: "",
          remediation_complexity: "Medium",
          remediation_description: "Implement IP-based and account-based rate limiting on authentication endpoints. Add exponential backoff for failed login attempts and CAPTCHA for suspicious activity.",
          references: [
            {
              url: "https://nvd.nist.gov/vuln/detail/CVE-2024-45678",
              description: "NVD Entry"
            },
            {
              url: "https://cheatsheetseries.owasp.org/cheatsheets/Authentication_Cheat_Sheet.html",
              description: "OWASP Authentication Cheat Sheet"
            }
          ],
          tags: ["authentication", "brute-force", "rate-limiting", "api"],
          assigned_to: "Backend Security Team",
          reporter: "Internal Security Audit",
          notes: "Fix in progress, expected to be completed by end of month. Temporary IP-based rate limiting implemented as mitigation."
        },
        {
          id: "VULN-2024-005",
          name: "Insecure Deserialization in Blockchain Data Parser",
          cve_id: "CVE-2024-56789",
          cvss_score: 9.8,
          cvss_vector: "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
          severity: "Critical",
          status: "Open",
          description: "The blockchain data parser uses insecure deserialization when processing blockchain data, allowing attackers to execute arbitrary code by submitting specially crafted transactions.",
          affected_components: ["Blockchain Parser", "Data Indexer"],
          affected_versions: ["1.2.0", "1.2.1", "1.3.0"],
          fixed_versions: [],
          exploit_available: true,
          exploit_maturity: "Functional",
          disclosure_date: "2024-08-15",
          discovery_date: "2024-08-10",
          remediation_date: "",
          remediation_complexity: "High",
          remediation_description: "Rewrite the deserialization logic to use a safe parser that doesn't execute code during deserialization. Implement strict schema validation for all incoming blockchain data.",
          references: [
            {
              url: "https://nvd.nist.gov/vuln/detail/CVE-2024-56789",
              description: "NVD Entry"
            },
            {
              url: "https://owasp.org/www-community/vulnerabilities/Deserialization_of_untrusted_data",
              description: "OWASP Deserialization Reference"
            }
          ],
          tags: ["deserialization", "rce", "blockchain", "parser"],
          assigned_to: "Core Development Team",
          reporter: "External Security Researcher",
          notes: "Critical vulnerability with active exploitation in the wild. Emergency patch being developed."
        }
      ],
      statistics: {
        total: 5,
        by_severity: {
          critical: 2,
          high: 2,
          medium: 1,
          low: 0,
          info: 0
        },
        by_status: {
          open: 2,
          fixed: 2,
          in_progress: 1,
          wont_fix: 0,
          false_positive: 0
        },
        by_component: {
          "Wallet Module": 2,
          "Transaction Processor": 1,
          "Key Management": 1,
          "Web Interface": 1,
          "Transaction History": 1,
          "Authentication Service": 1,
          "API Gateway": 1,
          "Blockchain Parser": 1,
          "Data Indexer": 1
        },
        average_time_to_fix: 15, // days
        oldest_open: "2024-08-10",
        newest: "2024-08-15"
      }
    };
  }, []);

  const loadVulnerabilityAssessment = useCallback(async () => {
    setIsLoading(true);

    try {
      // Simulate loading delay
      await new Promise(resolve => setTimeout(resolve, 2000));

      // Generate comprehensive vulnerability assessment
      const assessmentResult = generateVulnerabilityAssessment();
      setAssessment(assessmentResult);

    } catch (err) {
      console.error('Failed to load vulnerability assessment:', err);
    } finally {
      setIsLoading(false);
    }
  }, [generateVulnerabilityAssessment]);

  // Auto-load vulnerability assessment on component mount
  React.useEffect(() => {
    loadVulnerabilityAssessment();
  }, [loadVulnerabilityAssessment]);

  const getSeverityColor = useCallback((severity: string) => {
    switch (severity.toLowerCase()) {
      case 'critical': return 'text-red-800 bg-red-100 border-red-400';
      case 'high': return 'text-red-700 bg-red-50 border-red-300';
      case 'medium': return 'text-yellow-700 bg-yellow-50 border-yellow-300';
      case 'low': return 'text-blue-700 bg-blue-50 border-blue-300';
      default: return 'text-gray-700 bg-gray-100 border-gray-300';
    }
  }, []);

  const getStatusColor = useCallback((status: string) => {
    switch (status.toLowerCase().replace(' ', '_')) {
      case 'open': return 'text-red-700 bg-red-100 border-red-300';
      case 'fixed': return 'text-green-700 bg-green-100 border-green-300';
      case 'in_progress': return 'text-blue-700 bg-blue-100 border-blue-300';
      case 'wont_fix': return 'text-gray-700 bg-gray-100 border-gray-300';
      case 'false_positive': return 'text-purple-700 bg-purple-100 border-purple-300';
      default: return 'text-gray-700 bg-gray-100 border-gray-300';
    }
  }, []);

  const filteredVulnerabilities = useMemo(() => {
    if (!assessment) return [];
    
    return assessment.vulnerabilities.filter(vuln => {
      // Filter by severity
      if (selectedSeverity !== 'all' && vuln.severity.toLowerCase() !== selectedSeverity) {
        return false;
      }
      
      // Filter by status
      if (selectedStatus !== 'all' && vuln.status.toLowerCase().replace(' ', '_') !== selectedStatus) {
        return false;
      }
      
      // Filter by search query
      if (searchQuery) {
        const query = searchQuery.toLowerCase();
        return (
          vuln.name.toLowerCase().includes(query) ||
          vuln.cve_id.toLowerCase().includes(query) ||
          vuln.description.toLowerCase().includes(query) ||
          vuln.affected_components.some(c => c.toLowerCase().includes(query))
        );
      }
      
      return true;
    });
  }, [assessment, selectedSeverity, selectedStatus, searchQuery]);

  return (
    <div className="space-y-6">
      {/* Page Header */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5 }}
        className="bg-gradient-to-r from-blue-600 to-indigo-600 rounded-xl p-6 lg:p-8 text-white"
      >
        <h1 className="text-2xl sm:text-3xl lg:text-4xl font-bold mb-3 lg:mb-4">
          Vulnerability Assessment
        </h1>
        <p className="text-blue-100 text-base sm:text-lg mb-4 lg:mb-6">
          Comprehensive security vulnerability assessment and management for blockchain applications and smart contracts.
        </p>
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-3 lg:gap-4">
          <div className="bg-white/10 rounded-lg p-3 lg:p-4">
            <h3 className="font-semibold mb-2 text-sm sm:text-base">Smart Contract Auditing</h3>
            <p className="text-xs sm:text-sm text-blue-100">Automated and manual security audits</p>
          </div>
          <div className="bg-white/10 rounded-lg p-3 lg:p-4">
            <h3 className="font-semibold mb-2 text-sm sm:text-base">Vulnerability Tracking</h3>
            <p className="text-xs sm:text-sm text-blue-100">Comprehensive vulnerability management</p>
          </div>
          <div className="bg-white/10 rounded-lg p-3 lg:p-4">
            <h3 className="font-semibold mb-2 text-sm sm:text-base">Risk Assessment</h3>
            <p className="text-xs sm:text-sm text-blue-100">CVSS scoring and impact analysis</p>
          </div>
          <div className="bg-white/10 rounded-lg p-3 lg:p-4">
            <h3 className="font-semibold mb-2 text-sm sm:text-base">Remediation Planning</h3>
            <p className="text-xs sm:text-sm text-blue-100">Prioritized fix recommendations</p>
          </div>
        </div>
      </motion.div>

      {/* Controls */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5, delay: 0.1 }}
        className="bg-white rounded-xl shadow-lg p-6 border border-gray-200"
      >
        <div className="flex flex-col lg:flex-row lg:items-center justify-between space-y-4 lg:space-y-0 lg:space-x-4">
          <div>
            <h2 className="text-xl font-bold text-gray-900">Vulnerability Management</h2>
            <p className="text-sm text-gray-600">Track and manage security vulnerabilities</p>
          </div>
          <div className="flex flex-col sm:flex-row space-y-2 sm:space-y-0 sm:space-x-3">
            <div className="relative">
              <input
                type="text"
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                placeholder="Search vulnerabilities..."
                className="w-full px-4 py-2 pr-10 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
              <Search className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
            </div>
            <select
              value={selectedSeverity}
              onChange={(e) => setSelectedSeverity(e.target.value as any)}
              className="px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              <option value="all">All Severities</option>
              <option value="critical">Critical</option>
              <option value="high">High</option>
              <option value="medium">Medium</option>
              <option value="low">Low</option>
            </select>
            <select
              value={selectedStatus}
              onChange={(e) => setSelectedStatus(e.target.value as any)}
              className="px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              <option value="all">All Statuses</option>
              <option value="open">Open</option>
              <option value="in_progress">In Progress</option>
              <option value="fixed">Fixed</option>
            </select>
            <motion.button
              onClick={loadVulnerabilityAssessment}
              disabled={isLoading}
              className="px-6 py-2 bg-blue-600 text-white rounded-lg font-medium hover:bg-blue-700 disabled:opacity-50 flex items-center space-x-2"
              whileHover={{ scale: 1.02 }}
              whileTap={{ scale: 0.98 }}
            >
              {isLoading ? (
                <motion.div
                  animate={{ rotate: 360 }}
                  transition={{ duration: 1, repeat: Infinity, ease: "linear" }}
                >
                  <RefreshCw className="w-4 h-4" />
                </motion.div>
              ) : (
                <RefreshCw className="w-4 h-4" />
              )}
              <span>Refresh</span>
            </motion.button>
          </div>
        </div>
      </motion.div>

      {/* Assessment Results */}
      <AnimatePresence>
        {assessment && (
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -20 }}
            className="space-y-6"
          >
            {/* Assessment Overview */}
            <div className="bg-gradient-to-r from-blue-500 to-indigo-600 rounded-xl p-6 text-white">
              <div className="flex items-center justify-between mb-4">
                <div className="flex items-center space-x-3">
                  <Shield className="w-8 h-8" />
                  <h3 className="text-xl font-bold">Vulnerability Assessment Overview</h3>
                </div>
                <div className="flex items-center space-x-2">
                  <div className="w-2 h-2 bg-green-500 rounded-full animate-pulse"></div>
                  <span className="text-sm">Updated {new Date().toLocaleDateString()}</span>
                </div>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4">
                <div className="bg-white/10 rounded-lg p-4">
                  <div className="text-blue-100 text-sm mb-1">Total Vulnerabilities</div>
                  <div className="text-2xl font-bold">{assessment.statistics.total}</div>
                  <div className="text-xs text-blue-200">Identified issues</div>
                </div>
                <div className="bg-white/10 rounded-lg p-4">
                  <div className="text-blue-100 text-sm mb-1">Critical/High</div>
                  <div className="text-2xl font-bold">{assessment.statistics.by_severity.critical + assessment.statistics.by_severity.high}</div>
                  <div className="text-xs text-blue-200">High priority issues</div>
                </div>
                <div className="bg-white/10 rounded-lg p-4">
                  <div className="text-blue-100 text-sm mb-1">Open Issues</div>
                  <div className="text-2xl font-bold">{assessment.statistics.by_status.open}</div>
                  <div className="text-xs text-blue-200">Requiring attention</div>
                </div>
                <div className="bg-white/10 rounded-lg p-4">
                  <div className="text-blue-100 text-sm mb-1">Avg. Fix Time</div>
                  <div className="text-2xl font-bold">{assessment.statistics.average_time_to_fix} days</div>
                  <div className="text-xs text-blue-200">Mean time to remediate</div>
                </div>
                <div className="bg-white/10 rounded-lg p-4">
                  <div className="text-blue-100 text-sm mb-1">Fixed Issues</div>
                  <div className="text-2xl font-bold">{assessment.statistics.by_status.fixed}</div>
                  <div className="text-xs text-blue-200">Resolved vulnerabilities</div>
                </div>
              </div>
            </div>

            {/* Tab Navigation */}
            <div className="bg-white rounded-lg shadow-lg border border-gray-200">
              <div className="border-b border-gray-200">
                <nav className="flex space-x-8 px-6">
                  {[
                    { id: 'overview', label: 'Overview', icon: Eye },
                    { id: 'vulnerabilities', label: 'Vulnerabilities', icon: AlertTriangle },
                    { id: 'components', label: 'Affected Components', icon: Layers },
                    { id: 'remediation', label: 'Remediation', icon: Shield }
                  ].map((tab) => (
                    <motion.button
                      key={tab.id}
                      onClick={() => setSelectedTab(tab.id as any)}
                      className={`flex items-center space-x-2 py-4 border-b-2 font-medium text-sm ${
                        selectedTab === tab.id
                          ? 'border-blue-500 text-blue-600'
                          : 'border-transparent text-gray-500 hover:text-gray-700'
                      }`}
                      whileHover={{ scale: 1.02 }}
                      whileTap={{ scale: 0.98 }}
                    >
                      <tab.icon className="w-4 h-4" />
                      <span>{tab.label}</span>
                    </motion.button>
                  ))}
                </nav>
              </div>

              <div className="p-6">
                {selectedTab === 'overview' && (
                  <div className="space-y-6">
                    {/* Severity Distribution */}
                    <div>
                      <h4 className="text-lg font-semibold text-gray-900 mb-4">Severity Distribution</h4>
                      <div className="grid grid-cols-1 md:grid-cols-5 gap-4">
                        <div className="p-4 bg-red-100 border border-red-300 rounded-lg">
                          <div className="text-sm font-medium text-red-800 mb-2">Critical</div>
                          <div className="text-2xl font-bold text-red-900">{assessment.statistics.by_severity.critical}</div>
                          <div className="w-full bg-red-200 rounded-full h-2 mt-2">
                            <div 
                              className="bg-red-600 h-2 rounded-full" 
                              style={{ width: `${(assessment.statistics.by_severity.critical / assessment.statistics.total) * 100}%` }}
                            ></div>
                          </div>
                        </div>
                        <div className="p-4 bg-orange-100 border border-orange-300 rounded-lg">
                          <div className="text-sm font-medium text-orange-800 mb-2">High</div>
                          <div className="text-2xl font-bold text-orange-900">{assessment.statistics.by_severity.high}</div>
                          <div className="w-full bg-orange-200 rounded-full h-2 mt-2">
                            <div 
                              className="bg-orange-600 h-2 rounded-full" 
                              style={{ width: `${(assessment.statistics.by_severity.high / assessment.statistics.total) * 100}%` }}
                            ></div>
                          </div>
                        </div>
                        <div className="p-4 bg-yellow-100 border border-yellow-300 rounded-lg">
                          <div className="text-sm font-medium text-yellow-800 mb-2">Medium</div>
                          <div className="text-2xl font-bold text-yellow-900">{assessment.statistics.by_severity.medium}</div>
                          <div className="w-full bg-yellow-200 rounded-full h-2 mt-2">
                            <div 
                              className="bg-yellow-600 h-2 rounded-full" 
                              style={{ width: `${(assessment.statistics.by_severity.medium / assessment.statistics.total) * 100}%` }}
                            ></div>
                          </div>
                        </div>
                        <div className="p-4 bg-blue-100 border border-blue-300 rounded-lg">
                          <div className="text-sm font-medium text-blue-800 mb-2">Low</div>
                          <div className="text-2xl font-bold text-blue-900">{assessment.statistics.by_severity.low}</div>
                          <div className="w-full bg-blue-200 rounded-full h-2 mt-2">
                            <div 
                              className="bg-blue-600 h-2 rounded-full" 
                              style={{ width: `${(assessment.statistics.by_severity.low / assessment.statistics.total) * 100}%` }}
                            ></div>
                          </div>
                        </div>
                        <div className="p-4 bg-gray-100 border border-gray-300 rounded-lg">
                          <div className="text-sm font-medium text-gray-800 mb-2">Info</div>
                          <div className="text-2xl font-bold text-gray-900">{assessment.statistics.by_severity.info}</div>
                          <div className="w-full bg-gray-200 rounded-full h-2 mt-2">
                            <div 
                              className="bg-gray-600 h-2 rounded-full" 
                              style={{ width: `${(assessment.statistics.by_severity.info / assessment.statistics.total) * 100}%` }}
                            ></div>
                          </div>
                        </div>
                      </div>
                    </div>

                    {/* Status Distribution */}
                    <div>
                      <h4 className="text-lg font-semibold text-gray-900 mb-4">Status Distribution</h4>
                      <div className="grid grid-cols-1 md:grid-cols-5 gap-4">
                        <div className="p-4 bg-red-50 border border-red-200 rounded-lg">
                          <div className="text-sm font-medium text-red-800 mb-2">Open</div>
                          <div className="text-2xl font-bold text-red-900">{assessment.statistics.by_status.open}</div>
                          <div className="w-full bg-red-100 rounded-full h-2 mt-2">
                            <div 
                              className="bg-red-500 h-2 rounded-full" 
                              style={{ width: `${(assessment.statistics.by_status.open / assessment.statistics.total) * 100}%` }}
                            ></div>
                          </div>
                        </div>
                        <div className="p-4 bg-blue-50 border border-blue-200 rounded-lg">
                          <div className="text-sm font-medium text-blue-800 mb-2">In Progress</div>
                          <div className="text-2xl font-bold text-blue-900">{assessment.statistics.by_status.in_progress}</div>
                          <div className="w-full bg-blue-100 rounded-full h-2 mt-2">
                            <div 
                              className="bg-blue-500 h-2 rounded-full" 
                              style={{ width: `${(assessment.statistics.by_status.in_progress / assessment.statistics.total) * 100}%` }}
                            ></div>
                          </div>
                        </div>
                        <div className="p-4 bg-green-50 border border-green-200 rounded-lg">
                          <div className="text-sm font-medium text-green-800 mb-2">Fixed</div>
                          <div className="text-2xl font-bold text-green-900">{assessment.statistics.by_status.fixed}</div>
                          <div className="w-full bg-green-100 rounded-full h-2 mt-2">
                            <div 
                              className="bg-green-500 h-2 rounded-full" 
                              style={{ width: `${(assessment.statistics.by_status.fixed / assessment.statistics.total) * 100}%` }}
                            ></div>
                          </div>
                        </div>
                        <div className="p-4 bg-gray-50 border border-gray-200 rounded-lg">
                          <div className="text-sm font-medium text-gray-800 mb-2">Won't Fix</div>
                          <div className="text-2xl font-bold text-gray-900">{assessment.statistics.by_status.wont_fix}</div>
                          <div className="w-full bg-gray-100 rounded-full h-2 mt-2">
                            <div 
                              className="bg-gray-500 h-2 rounded-full" 
                              style={{ width: `${(assessment.statistics.by_status.wont_fix / assessment.statistics.total) * 100}%` }}
                            ></div>
                          </div>
                        </div>
                        <div className="p-4 bg-purple-50 border border-purple-200 rounded-lg">
                          <div className="text-sm font-medium text-purple-800 mb-2">False Positive</div>
                          <div className="text-2xl font-bold text-purple-900">{assessment.statistics.by_status.false_positive}</div>
                          <div className="w-full bg-purple-100 rounded-full h-2 mt-2">
                            <div 
                              className="bg-purple-500 h-2 rounded-full" 
                              style={{ width: `${(assessment.statistics.by_status.false_positive / assessment.statistics.total) * 100}%` }}
                            ></div>
                          </div>
                        </div>
                      </div>
                    </div>

                    {/* Key Metrics */}
                    <div className="bg-gray-50 rounded-lg p-6">
                      <h4 className="text-lg font-semibold text-gray-900 mb-4">Key Metrics</h4>
                      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                        <div className="text-center">
                          <div className="text-2xl font-bold text-blue-600">{assessment.statistics.average_time_to_fix} days</div>
                          <div className="text-sm text-gray-600">Average Time to Fix</div>
                        </div>
                        <div className="text-center">
                          <div className="text-2xl font-bold text-red-600">{assessment.statistics.oldest_open}</div>
                          <div className="text-sm text-gray-600">Oldest Open Vulnerability</div>
                        </div>
                        <div className="text-center">
                          <div className="text-2xl font-bold text-purple-600">{assessment.statistics.newest}</div>
                          <div className="text-sm text-gray-600">Newest Vulnerability</div>
                        </div>
                      </div>
                    </div>
                  </div>
                )}

                {selectedTab === 'vulnerabilities' && (
                  <div className="space-y-6">
                    {/* Vulnerabilities List */}
                    <div>
                      <h4 className="text-lg font-semibold text-gray-900 mb-4">
                        Vulnerabilities ({filteredVulnerabilities.length})
                      </h4>
                      <div className="space-y-4">
                        {filteredVulnerabilities.length > 0 ? (
                          filteredVulnerabilities.map((vuln, index) => (
                            <div key={index} className="p-4 border border-gray-200 rounded-lg hover:shadow-md transition-shadow">
                              <div className="flex items-center justify-between mb-3">
                                <div className="flex items-center space-x-3">
                                  <h5 className="font-semibold text-gray-900">{vuln.name}</h5>
                                  <span className={`px-3 py-1 rounded-full text-xs font-medium border ${getSeverityColor(vuln.severity)}`}>
                                    {vuln.severity}
                                  </span>
                                  <span className={`px-3 py-1 rounded-full text-xs font-medium border ${getStatusColor(vuln.status)}`}>
                                    {vuln.status}
                                  </span>
                                </div>
                                <span className="text-sm text-gray-600">{vuln.cve_id}</span>
                              </div>
                              
                              <p className="text-sm text-gray-700 mb-3">{vuln.description}</p>
                              
                              <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-3">
                                <div>
                                  <div className="text-xs text-gray-600 mb-1">CVSS Score:</div>
                                  <div className="font-medium text-gray-900">{vuln.cvss_score} ({vuln.cvss_vector})</div>
                                </div>
                                <div>
                                  <div className="text-xs text-gray-600 mb-1">Affected Versions:</div>
                                  <div className="font-medium text-gray-900">{vuln.affected_versions.join(', ')}</div>
                                </div>
                                <div>
                                  <div className="text-xs text-gray-600 mb-1">Fixed Versions:</div>
                                  <div className="font-medium text-gray-900">
                                    {vuln.fixed_versions.length > 0 ? vuln.fixed_versions.join(', ') : 'None'}
                                  </div>
                                </div>
                              </div>

                              <div className="mb-3">
                                <div className="text-xs text-gray-600 mb-1">Affected Components:</div>
                                <div className="flex flex-wrap gap-1">
                                  {vuln.affected_components.map((component, compIndex) => (
                                    <span
                                      key={compIndex}
                                      className="px-2 py-1 bg-blue-100 text-blue-800 rounded text-xs font-medium"
                                    >
                                      {component}
                                    </span>
                                  ))}
                                </div>
                              </div>

                              <div className="flex items-center justify-between text-xs text-gray-500">
                                <div>Discovered: {vuln.discovery_date}</div>
                                <div>Assigned to: {vuln.assigned_to}</div>
                              </div>
                            </div>
                          ))
                        ) : (
                          <div className="text-center py-8">
                            <Shield className="w-12 h-12 text-gray-400 mx-auto mb-4" />
                            <p className="text-gray-500">No vulnerabilities match your current filters.</p>
                          </div>
                        )}
                      </div>
                    </div>
                  </div>
                )}

                {selectedTab === 'components' && (
                  <div className="space-y-6">
                    {/* Component Analysis */}
                    <div>
                      <h4 className="text-lg font-semibold text-gray-900 mb-4">Component Vulnerability Analysis</h4>
                      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                        {Object.entries(assessment.statistics.by_component).map(([component, count], index) => (
                          <div key={index} className="p-4 border border-gray-200 rounded-lg">
                            <div className="flex items-center justify-between mb-2">
                              <span className="font-semibold text-gray-900">{component}</span>
                              <span className="text-sm text-gray-600">{count} {count === 1 ? 'vulnerability' : 'vulnerabilities'}</span>
                            </div>
                            <div className="w-full bg-gray-200 rounded-full h-2 mt-2">
                              <div 
                                className={`h-2 rounded-full ${count > 2 ? 'bg-red-500' : count > 1 ? 'bg-orange-500' : 'bg-yellow-500'}`}
                                style={{ width: `${(count / Math.max(...Object.values(assessment.statistics.by_component))) * 100}%` }}
                              ></div>
                            </div>
                            <div className="mt-3">
                              {filteredVulnerabilities
                                .filter(v => v.affected_components.includes(component))
                                .slice(0, 2)
                                .map((vuln, vIndex) => (
                                  <div key={vIndex} className="text-xs text-gray-600 mt-1">
                                    • {vuln.name} ({vuln.severity})
                                  </div>
                                ))}
                              {filteredVulnerabilities.filter(v => v.affected_components.includes(component)).length > 2 && (
                                <div className="text-xs text-blue-600 mt-1">
                                  + {filteredVulnerabilities.filter(v => v.affected_components.includes(component)).length - 2} more
                                </div>
                              )}
                            </div>
                          </div>
                        ))}
                      </div>
                    </div>
                  </div>
                )}

                {selectedTab === 'remediation' && (
                  <div className="space-y-6">
                    {/* Remediation Plans */}
                    <div>
                      <h4 className="text-lg font-semibold text-gray-900 mb-4">Remediation Plans</h4>
                      <div className="space-y-4">
                        {filteredVulnerabilities
                          .filter(v => v.status === 'Open' || v.status === 'In Progress')
                          .map((vuln, index) => (
                            <div key={index} className="p-4 border border-gray-200 rounded-lg">
                              <div className="flex items-center justify-between mb-3">
                                <div className="flex items-center space-x-3">
                                  <h5 className="font-semibold text-gray-900">{vuln.name}</h5>
                                  <span className={`px-3 py-1 rounded-full text-xs font-medium border ${getSeverityColor(vuln.severity)}`}>
                                    {vuln.severity}
                                  </span>
                                  <span className={`px-3 py-1 rounded-full text-xs font-medium border ${getStatusColor(vuln.status)}`}>
                                    {vuln.status}
                                  </span>
                                </div>
                              </div>
                              
                              <div className="mb-3">
                                <div className="text-sm font-medium text-gray-700 mb-2">Remediation Plan:</div>
                                <p className="text-sm text-gray-700">{vuln.remediation_description}</p>
                              </div>
                              
                              <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-3">
                                <div>
                                  <div className="text-xs text-gray-600 mb-1">Complexity:</div>
                                  <div className="font-medium text-gray-900">{vuln.remediation_complexity}</div>
                                </div>
                                <div>
                                  <div className="text-xs text-gray-600 mb-1">Assigned To:</div>
                                  <div className="font-medium text-gray-900">{vuln.assigned_to}</div>
                                </div>
                                <div>
                                  <div className="text-xs text-gray-600 mb-1">Target Date:</div>
                                  <div className="font-medium text-gray-900">
                                    {vuln.remediation_date || 'Not scheduled'}
                                  </div>
                                </div>
                              </div>

                              {vuln.notes && (
                                <div className="mb-3">
                                  <div className="text-xs text-gray-600 mb-1">Notes:</div>
                                  <p className="text-sm text-gray-700">{vuln.notes}</p>
                                </div>
                              )}

                              <div className="mb-3">
                                <div className="text-xs text-gray-600 mb-1">References:</div>
                                <div className="space-y-1">
                                  {vuln.references.map((ref, refIndex) => (
                                    <div key={refIndex} className="flex items-center space-x-2">
                                      <ExternalLink className="w-3 h-3 text-blue-600" />
                                      <a 
                                        href={ref.url} 
                                        target="_blank" 
                                        rel="noopener noreferrer"
                                        className="text-xs text-blue-600 hover:underline"
                                      >
                                        {ref.description}
                                      </a>
                                    </div>
                                  ))}
                                </div>
                              </div>
                            </div>
                          ))}
                        {filteredVulnerabilities.filter(v => v.status === 'Open' || v.status === 'In Progress').length === 0 && (
                          <div className="text-center py-8">
                            <CheckCircle className="w-12 h-12 text-green-400 mx-auto mb-4" />
                            <p className="text-gray-500">No open vulnerabilities requiring remediation.</p>
                          </div>
                        )}
                      </div>
                    </div>
                  </div>
                )}
              </div>
            </div>

            {/* External Resources */}
            <div className="bg-gray-50 rounded-lg p-4 border border-gray-200">
              <h4 className="text-md font-semibold text-gray-800 mb-3">Security Resources</h4>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-3">
                <motion.a
                  href="https://nvd.nist.gov/"
                  target="_blank"
                  rel="noopener noreferrer"
                  className="flex items-center space-x-2 p-3 bg-white border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors"
                  whileHover={{ scale: 1.02 }}
                  whileTap={{ scale: 0.98 }}
                >
                  <ExternalLink className="w-4 h-4 text-blue-600" />
                  <span className="text-sm font-medium">National Vulnerability Database</span>
                </motion.a>
                <motion.a
                  href="https://owasp.org/www-project-top-ten/"
                  target="_blank"
                  rel="noopener noreferrer"
                  className="flex items-center space-x-2 p-3 bg-white border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors"
                  whileHover={{ scale: 1.02 }}
                  whileTap={{ scale: 0.98 }}
                >
                  <ExternalLink className="w-4 h-4 text-blue-600" />
                  <span className="text-sm font-medium">OWASP Top 10</span>
                </motion.a>
                <motion.a
                  href="https://consensys.github.io/smart-contract-best-practices/"
                  target="_blank"
                  rel="noopener noreferrer"
                  className="flex items-center space-x-2 p-3 bg-white border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors"
                  whileHover={{ scale: 1.02 }}
                  whileTap={{ scale: 0.98 }}
                >
                  <ExternalLink className="w-4 h-4 text-blue-600" />
                  <span className="text-sm font-medium">Smart Contract Best Practices</span>
                </motion.a>
              </div>
            </div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Loading State */}
      {isLoading && (
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          className="text-center py-12"
        >
          <motion.div
            animate={{ rotate: 360 }}
            transition={{ duration: 2, repeat: Infinity, ease: "linear" }}
            className="w-12 h-12 mx-auto mb-4"
          >
            <Shield className="w-12 h-12 text-blue-500" />
          </motion.div>
          <p className="text-gray-600">Loading vulnerability assessment data...</p>
        </motion.div>
      )}
    </div>
  );
};

export default VulnerabilityAssessmentPage;