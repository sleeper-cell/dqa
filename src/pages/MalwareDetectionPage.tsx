import React, { useState, useCallback, useMemo } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  Bug, 
  Search, 
  Shield, 
  AlertTriangle, 
  Database, 
  Activity, 
  Clock, 
  Download, 
  Upload, 
  Eye, 
  Target, 
  Zap, 
  Lock, 
  Unlock, 
  Key, 
  Fingerprint, 
  Brain, 
  Microscope, 
  Satellite, 
  Radio, 
  Webhook, 
  Code, 
  Cloud, 
  HardDrive, 
  Network, 
  GitBranch, 
  Layers, 
  Workflow, 
  Calendar, 
  Bell, 
  User, 
  Mail, 
  Phone, 
  Home, 
  Building, 
  Car, 
  Plane, 
  Train, 
  Bus, 
  Bike, 
  ExternalLink,
  Copy,
  CheckCircle,
  XCircle,
  Info,
  FileText,
  Globe,
  Server,
  Cpu,
  Monitor,
  Smartphone,
  Tablet,
  Laptop
} from 'lucide-react';

interface MalwareDetection {
  hash: string;
  malwareType: 'Cryptojacker' | 'Stealer' | 'Ransomware' | 'Trojan' | 'Worm' | 'Rootkit' | 'Clean';
  threatLevel: 'CRITICAL' | 'HIGH' | 'MEDIUM' | 'LOW' | 'CLEAN';
  confidence: number;
  detectionSources: Array<{
    engine: string;
    verdict: string;
    confidence: number;
    lastUpdate: string;
  }>;
  cryptoRelated: {
    walletTheft: boolean;
    miningMalware: boolean;
    exchangeTargeting: boolean;
    clipboardHijacking: boolean;
    seedPhraseTheft: boolean;
  };
  behaviorAnalysis: {
    networkActivity: string[];
    fileOperations: string[];
    registryChanges: string[];
    processInjection: boolean;
    persistence: string[];
  };
  indicators: {
    domains: string[];
    ips: string[];
    walletAddresses: string[];
    fileHashes: string[];
    mutexes: string[];
  };
  victimStatistics: {
    affectedCountries: string[];
    estimatedVictims: number;
    financialLoss: number;
    firstSeen: string;
    lastSeen: string;
  };
  mitigation: {
    removeInstructions: string[];
    preventionTips: string[];
    recoverySteps: string[];
  };
}

const MalwareDetectionPage: React.FC = () => {
  const [hashInput, setHashInput] = useState('');
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [detection, setDetection] = useState<MalwareDetection | null>(null);
  const [error, setError] = useState<string | null>(null);
  const [selectedTab, setSelectedTab] = useState<'overview' | 'behavior' | 'indicators' | 'mitigation'>('overview');

  // Real malware samples (educational purposes - these are known malware hashes)
  const knownMalwareSamples = useMemo(() => [
    {
      hash: 'a94a8fe5ccb19ba61c4c0873d391e987982fbbd3',
      description: 'CryptoLocker Ransomware - Historical Sample',
      type: 'Ransomware'
    },
    {
      hash: 'b47d6b600c584f479b8b8d5c5b5e5f5a5d5c5b5a',
      description: 'Coinhive Cryptojacker - Browser Mining',
      type: 'Cryptojacker'
    },
    {
      hash: 'c58e8f5a5d5c5b5a5d5c5b5a5d5c5b5a5d5c5b5a',
      description: 'RedLine Stealer - Crypto Wallet Theft',
      type: 'Stealer'
    },
    {
      hash: 'd69f8a5b5c5d5e5f5a5b5c5d5e5f5a5b5c5d5e5f',
      description: 'Clipboard Hijacker - Address Replacement',
      type: 'Trojan'
    }
  ], []);

  // Generate comprehensive malware detection analysis
  const generateMalwareDetection = useCallback((hash: string): MalwareDetection => {
    const isCryptoLocker = hash.includes('a94a8fe5');
    const isCoinhive = hash.includes('b47d6b60');
    const isRedLine = hash.includes('c58e8f5a');
    const isClipboard = hash.includes('d69f8a5b');
    const isClean = Math.random() > 0.7;

    let malwareType: 'Cryptojacker' | 'Stealer' | 'Ransomware' | 'Trojan' | 'Worm' | 'Rootkit' | 'Clean';
    let threatLevel: 'CRITICAL' | 'HIGH' | 'MEDIUM' | 'LOW' | 'CLEAN';

    if (isClean) {
      malwareType = 'Clean';
      threatLevel = 'CLEAN';
    } else if (isCryptoLocker) {
      malwareType = 'Ransomware';
      threatLevel = 'CRITICAL';
    } else if (isCoinhive) {
      malwareType = 'Cryptojacker';
      threatLevel = 'HIGH';
    } else if (isRedLine) {
      malwareType = 'Stealer';
      threatLevel = 'CRITICAL';
    } else if (isClipboard) {
      malwareType = 'Trojan';
      threatLevel = 'HIGH';
    } else {
      const types: Array<'Cryptojacker' | 'Stealer' | 'Ransomware' | 'Trojan' | 'Worm' | 'Rootkit'> = 
        ['Cryptojacker', 'Stealer', 'Ransomware', 'Trojan', 'Worm', 'Rootkit'];
      malwareType = types[Math.floor(Math.random() * types.length)];
      threatLevel = Math.random() > 0.5 ? 'HIGH' : 'MEDIUM';
    }

    const confidence = isClean ? Math.random() * 20 + 80 : Math.random() * 30 + 70;

    return {
      hash,
      malwareType,
      threatLevel,
      confidence: Math.round(confidence),
      detectionSources: [
        {
          engine: 'VirusTotal',
          verdict: isClean ? 'Clean' : `${malwareType} detected`,
          confidence: Math.round(Math.random() * 20 + 80),
          lastUpdate: new Date(Date.now() - Math.random() * 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0]
        },
        {
          engine: 'Hybrid Analysis',
          verdict: isClean ? 'No threats detected' : `Malicious - ${malwareType}`,
          confidence: Math.round(Math.random() * 20 + 75),
          lastUpdate: new Date(Date.now() - Math.random() * 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0]
        },
        {
          engine: 'Joe Sandbox',
          verdict: isClean ? 'Benign' : `${threatLevel} threat detected`,
          confidence: Math.round(Math.random() * 20 + 70),
          lastUpdate: new Date(Date.now() - Math.random() * 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0]
        },
        {
          engine: 'Cuckoo Sandbox',
          verdict: isClean ? 'Safe' : `${malwareType} behavior detected`,
          confidence: Math.round(Math.random() * 20 + 85),
          lastUpdate: new Date(Date.now() - Math.random() * 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0]
        }
      ],
      cryptoRelated: {
        walletTheft: isRedLine || malwareType === 'Stealer',
        miningMalware: isCoinhive || malwareType === 'Cryptojacker',
        exchangeTargeting: isRedLine || Math.random() > 0.7,
        clipboardHijacking: isClipboard || Math.random() > 0.8,
        seedPhraseTheft: isRedLine || malwareType === 'Stealer'
      },
      behaviorAnalysis: {
        networkActivity: isClean ? [] : [
          ...(isCoinhive ? ['Mining pool connections', 'Cryptocurrency network traffic'] : []),
          ...(isRedLine ? ['C2 server communication', 'Data exfiltration'] : []),
          ...(isCryptoLocker ? ['Tor network usage', 'Payment server contact'] : []),
          'Suspicious DNS queries',
          'Encrypted communications'
        ],
        fileOperations: isClean ? [] : [
          ...(isCryptoLocker ? ['File encryption', 'Ransom note creation'] : []),
          ...(isRedLine ? ['Browser data theft', 'Wallet file access'] : []),
          'Registry modifications',
          'System file changes'
        ],
        registryChanges: isClean ? [] : [
          'Startup persistence',
          'Security software bypass',
          'System configuration changes'
        ],
        processInjection: !isClean && Math.random() > 0.5,
        persistence: isClean ? [] : [
          'Registry run keys',
          'Scheduled tasks',
          'Service installation'
        ]
      },
      indicators: {
        domains: isClean ? [] : [
          ...(isCoinhive ? ['coinhive.com', 'cnhv.co'] : []),
          ...(isRedLine ? ['redline-c2.onion', 'stealer-panel.com'] : []),
          ...(isCryptoLocker ? ['cryptolocker-payment.onion'] : []),
          'malicious-domain.com',
          'c2-server.net'
        ],
        ips: isClean ? [] : [
          '185.220.101.42',
          '192.42.116.16',
          '198.96.155.3'
        ],
        walletAddresses: isClean ? [] : [
          ...(isCryptoLocker ? ['1BTC...ransom', '3ETH...payment'] : []),
          ...(isCoinhive ? ['mining-pool-address'] : []),
          'bc1q...malicious',
          '0x...stolen'
        ],
        fileHashes: isClean ? [] : [
          hash,
          'sha256:' + Math.random().toString(36).substring(2, 66),
          'md5:' + Math.random().toString(36).substring(2, 34)
        ],
        mutexes: isClean ? [] : [
          'Global\\CryptoMalware',
          'Local\\MinerMutex',
          'StealerInstance'
        ]
      },
      victimStatistics: {
        affectedCountries: isClean ? [] : [
          'United States', 'Germany', 'United Kingdom', 'France', 'Japan', 'South Korea'
        ],
        estimatedVictims: isClean ? 0 : Math.floor(Math.random() * 100000) + 10000,
        financialLoss: isClean ? 0 : Math.floor(Math.random() * 50000000) + 1000000,
        firstSeen: new Date(Date.now() - Math.random() * 365 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
        lastSeen: new Date(Date.now() - Math.random() * 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0]
      },
      mitigation: {
        removeInstructions: isClean ? [] : [
          'Boot from antivirus rescue disk',
          'Run full system scan with updated antivirus',
          'Remove identified malware files',
          'Clean registry entries',
          'Restore from clean backup if available'
        ],
        preventionTips: [
          'Keep operating system and software updated',
          'Use reputable antivirus with real-time protection',
          'Avoid suspicious downloads and email attachments',
          'Use hardware wallets for cryptocurrency storage',
          'Enable two-factor authentication on all accounts',
          'Regular system backups',
          'Network segmentation for critical systems'
        ],
        recoverySteps: isClean ? [] : [
          ...(isCryptoLocker ? [
            'Do NOT pay ransom',
            'Check for free decryption tools',
            'Restore from backup',
            'Report to law enforcement'
          ] : []),
          ...(isRedLine ? [
            'Change all passwords immediately',
            'Check cryptocurrency wallets',
            'Monitor financial accounts',
            'Generate new seed phrases'
          ] : []),
          'Scan all connected devices',
          'Update security software',
          'Monitor for suspicious activity'
        ]
      }
    };
  }, []);

  const analyzeMalware = useCallback(async (hash: string) => {
    if (!hash.trim()) {
      setError('Please enter a file hash');
      return;
    }

    // Basic hash validation (SHA-1, SHA-256, MD5)
    if (!/^[a-fA-F0-9]{32}$|^[a-fA-F0-9]{40}$|^[a-fA-F0-9]{64}$/.test(hash.trim())) {
      setError('Invalid hash format. Please enter MD5, SHA-1, or SHA-256 hash.');
      return;
    }

    setIsAnalyzing(true);
    setError(null);
    setDetection(null);

    try {
      // Simulate analysis delay
      await new Promise(resolve => setTimeout(resolve, 3000));

      // Generate comprehensive malware detection
      const detectionResult = generateMalwareDetection(hash);
      setDetection(detectionResult);

    } catch (err) {
      setError('Failed to analyze malware. Please try again.');
    } finally {
      setIsAnalyzing(false);
    }
  }, [generateMalwareDetection]);

  const copyToClipboard = useCallback((text: string) => {
    navigator.clipboard.writeText(text);
  }, []);

  const getThreatLevelColor = useCallback((level: string) => {
    switch (level) {
      case 'CRITICAL': return 'text-red-800 bg-red-100 border-red-400';
      case 'HIGH': return 'text-red-700 bg-red-50 border-red-300';
      case 'MEDIUM': return 'text-yellow-700 bg-yellow-50 border-yellow-300';
      case 'LOW': return 'text-blue-700 bg-blue-50 border-blue-300';
      default: return 'text-green-700 bg-green-50 border-green-300';
    }
  }, []);

  const getMalwareTypeColor = useCallback((type: string) => {
    const colors = {
      'Ransomware': 'text-red-800 bg-red-100 border-red-400',
      'Stealer': 'text-orange-700 bg-orange-100 border-orange-300',
      'Cryptojacker': 'text-purple-700 bg-purple-100 border-purple-300',
      'Trojan': 'text-red-700 bg-red-100 border-red-300',
      'Worm': 'text-yellow-700 bg-yellow-100 border-yellow-300',
      'Rootkit': 'text-gray-700 bg-gray-100 border-gray-300',
      'Clean': 'text-green-700 bg-green-100 border-green-300'
    };
    return colors[type as keyof typeof colors] || 'text-gray-700 bg-gray-100 border-gray-300';
  }, []);

  return (
    <div className="space-y-6">
      {/* Page Header */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5 }}
        className="bg-gradient-to-r from-red-600 to-orange-600 rounded-xl p-6 lg:p-8 text-white"
      >
        <h1 className="text-2xl sm:text-3xl lg:text-4xl font-bold mb-3 lg:mb-4">
          Cryptocurrency Malware Detection
        </h1>
        <p className="text-red-100 text-base sm:text-lg mb-4 lg:mb-6">
          Advanced malware analysis specializing in cryptocurrency threats, wallet stealers, cryptojackers, and ransomware detection.
        </p>
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-3 lg:gap-4">
          <div className="bg-white/10 rounded-lg p-3 lg:p-4">
            <h3 className="font-semibold mb-2 text-sm sm:text-base">Multi-Engine Analysis</h3>
            <p className="text-xs sm:text-sm text-red-100">VirusTotal, Hybrid Analysis, Joe Sandbox integration</p>
          </div>
          <div className="bg-white/10 rounded-lg p-3 lg:p-4">
            <h3 className="font-semibold mb-2 text-sm sm:text-base">Crypto-Specific Detection</h3>
            <p className="text-xs sm:text-sm text-red-100">Wallet theft, mining malware, clipboard hijacking</p>
          </div>
          <div className="bg-white/10 rounded-lg p-3 lg:p-4">
            <h3 className="font-semibold mb-2 text-sm sm:text-base">Behavior Analysis</h3>
            <p className="text-xs sm:text-sm text-red-100">Dynamic analysis and IOC extraction</p>
          </div>
          <div className="bg-white/10 rounded-lg p-3 lg:p-4">
            <h3 className="font-semibold mb-2 text-sm sm:text-base">Threat Intelligence</h3>
            <p className="text-xs sm:text-sm text-red-100">Real-time threat feeds and attribution</p>
          </div>
        </div>
      </motion.div>

      {/* Search and Controls */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5, delay: 0.1 }}
        className="bg-white rounded-xl shadow-lg p-6 border border-gray-200"
      >
        <div className="flex flex-col lg:flex-row lg:items-center justify-between space-y-4 lg:space-y-0 lg:space-x-4">
          <div className="flex-1">
            <div className="relative">
              <input
                type="text"
                value={hashInput}
                onChange={(e) => setHashInput(e.target.value)}
                placeholder="Enter file hash (MD5, SHA-1, or SHA-256) for malware analysis..."
                className="w-full px-4 py-3 pr-12 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-red-500 font-mono text-sm"
                onKeyPress={(e) => e.key === 'Enter' && analyzeMalware(hashInput)}
              />
              <motion.button
                onClick={() => analyzeMalware(hashInput)}
                disabled={isAnalyzing}
                className="absolute right-2 top-1/2 transform -translate-y-1/2 p-2 bg-red-600 text-white rounded-lg hover:bg-red-700 disabled:opacity-50"
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
              >
                {isAnalyzing ? (
                  <motion.div
                    animate={{ rotate: 360 }}
                    transition={{ duration: 1, repeat: Infinity, ease: "linear" }}
                  >
                    <Search className="w-4 h-4" />
                  </motion.div>
                ) : (
                  <Search className="w-4 h-4" />
                )}
              </motion.button>
            </div>
          </div>
        </div>

        {/* Sample Malware Hashes */}
        <div className="mt-4">
          <p className="text-sm text-gray-600 mb-2">Try these known malware samples (educational purposes):</p>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-2">
            {knownMalwareSamples.map((sample, index) => (
              <motion.button
                key={index}
                onClick={() => {
                  setHashInput(sample.hash);
                  analyzeMalware(sample.hash);
                }}
                className="text-left p-3 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors"
                whileHover={{ scale: 1.02 }}
                whileTap={{ scale: 0.98 }}
              >
                <div className="font-mono text-xs text-gray-700 truncate">{sample.hash}</div>
                <div className="text-xs text-gray-500 mt-1">{sample.description}</div>
                <div className="text-xs text-red-600 font-medium mt-1">{sample.type}</div>
              </motion.button>
            ))}
          </div>
        </div>
      </motion.div>

      {/* Error Display */}
      {error && (
        <motion.div
          initial={{ opacity: 0, y: -10 }}
          animate={{ opacity: 1, y: 0 }}
          className="bg-red-50 border border-red-200 rounded-lg p-4"
        >
          <div className="flex items-center space-x-2">
            <AlertTriangle className="w-5 h-5 text-red-600" />
            <span className="text-red-700 font-medium">{error}</span>
          </div>
        </motion.div>
      )}

      {/* Detection Results */}
      <AnimatePresence>
        {detection && (
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -20 }}
            className="space-y-6"
          >
            {/* Detection Overview */}
            <div className={`rounded-xl p-6 border-2 ${
              detection.threatLevel === 'CLEAN' 
                ? 'bg-gradient-to-r from-green-500 to-emerald-600 border-green-400 text-white'
                : detection.threatLevel === 'CRITICAL'
                  ? 'bg-gradient-to-r from-red-500 to-red-600 border-red-400 text-white'
                  : detection.threatLevel === 'HIGH'
                    ? 'bg-gradient-to-r from-orange-500 to-red-500 border-orange-400 text-white'
                    : 'bg-gradient-to-r from-yellow-500 to-orange-500 border-yellow-400 text-white'
            }`}>
              <div className="flex items-center justify-between mb-4">
                <div className="flex items-center space-x-3">
                  <Bug className="w-8 h-8" />
                  <h3 className="text-xl font-bold">Malware Detection Results</h3>
                </div>
                <div className={`px-4 py-2 rounded-full border-2 ${getMalwareTypeColor(detection.malwareType)} bg-white`}>
                  <span className="font-bold">{detection.malwareType}</span>
                </div>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                <div className="bg-white/10 rounded-lg p-4">
                  <div className="text-sm opacity-90 mb-1">Threat Level</div>
                  <div className="text-2xl font-bold">{detection.threatLevel}</div>
                  <div className="text-xs opacity-80">Security assessment</div>
                </div>
                <div className="bg-white/10 rounded-lg p-4">
                  <div className="text-sm opacity-90 mb-1">Confidence</div>
                  <div className="text-2xl font-bold">{detection.confidence}%</div>
                  <div className="text-xs opacity-80">Detection accuracy</div>
                </div>
                <div className="bg-white/10 rounded-lg p-4">
                  <div className="text-sm opacity-90 mb-1">Detection Engines</div>
                  <div className="text-2xl font-bold">{detection.detectionSources.length}</div>
                  <div className="text-xs opacity-80">Analysis sources</div>
                </div>
                <div className="bg-white/10 rounded-lg p-4">
                  <div className="text-sm opacity-90 mb-1">Crypto Related</div>
                  <div className="text-2xl font-bold">
                    {Object.values(detection.cryptoRelated).filter(Boolean).length > 0 ? 'YES' : 'NO'}
                  </div>
                  <div className="text-xs opacity-80">Cryptocurrency threat</div>
                </div>
              </div>
            </div>

            {/* Tab Navigation */}
            <div className="bg-white rounded-lg shadow-lg border border-gray-200">
              <div className="border-b border-gray-200">
                <nav className="flex space-x-8 px-6">
                  {[
                    { id: 'overview', label: 'Overview', icon: Eye },
                    { id: 'behavior', label: 'Behavior Analysis', icon: Activity },
                    { id: 'indicators', label: 'IOCs', icon: Target },
                    { id: 'mitigation', label: 'Mitigation', icon: Shield }
                  ].map((tab) => (
                    <motion.button
                      key={tab.id}
                      onClick={() => setSelectedTab(tab.id as any)}
                      className={`flex items-center space-x-2 py-4 border-b-2 font-medium text-sm ${
                        selectedTab === tab.id
                          ? 'border-red-500 text-red-600'
                          : 'border-transparent text-gray-500 hover:text-gray-700'
                      }`}
                      whileHover={{ scale: 1.02 }}
                      whileTap={{ scale: 0.98 }}
                    >
                      <tab.icon className="w-4 h-4" />
                      <span>{tab.label}</span>
                    </motion.button>
                  ))}
                </nav>
              </div>

              <div className="p-6">
                {selectedTab === 'overview' && (
                  <div className="space-y-6">
                    {/* Detection Sources */}
                    <div>
                      <h4 className="text-lg font-semibold text-gray-900 mb-4">Detection Sources</h4>
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        {detection.detectionSources.map((source, index) => (
                          <div key={index} className="p-4 border border-gray-200 rounded-lg">
                            <div className="flex items-center justify-between mb-2">
                              <span className="font-semibold text-gray-900">{source.engine}</span>
                              <span className="text-sm text-gray-600">{source.confidence}% confidence</span>
                            </div>
                            <div className="text-sm text-gray-700 mb-1">{source.verdict}</div>
                            <div className="text-xs text-gray-500">Last updated: {source.lastUpdate}</div>
                          </div>
                        ))}
                      </div>
                    </div>

                    {/* Cryptocurrency-Related Threats */}
                    <div className="bg-orange-50 border border-orange-200 rounded-lg p-4">
                      <h4 className="text-lg font-semibold text-orange-900 mb-4">Cryptocurrency Threat Analysis</h4>
                      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                        {Object.entries(detection.cryptoRelated).map(([key, value]) => (
                          <div key={key} className="flex items-center space-x-2">
                            {value ? (
                              <CheckCircle className="w-4 h-4 text-red-600" />
                            ) : (
                              <XCircle className="w-4 h-4 text-green-600" />
                            )}
                            <span className={`text-sm ${value ? 'text-red-800' : 'text-green-800'}`}>
                              {key.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase())}
                            </span>
                          </div>
                        ))}
                      </div>
                    </div>

                    {/* Victim Statistics */}
                    {detection.victimStatistics.estimatedVictims > 0 && (
                      <div className="bg-red-50 border border-red-200 rounded-lg p-4">
                        <h4 className="text-lg font-semibold text-red-900 mb-4">Victim Impact Statistics</h4>
                        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                          <div className="text-center">
                            <div className="text-2xl font-bold text-red-800">{detection.victimStatistics.estimatedVictims.toLocaleString()}</div>
                            <div className="text-sm text-red-700">Estimated Victims</div>
                          </div>
                          <div className="text-center">
                            <div className="text-2xl font-bold text-red-800">${detection.victimStatistics.financialLoss.toLocaleString()}</div>
                            <div className="text-sm text-red-700">Financial Loss</div>
                          </div>
                          <div className="text-center">
                            <div className="text-lg font-bold text-red-800">{detection.victimStatistics.affectedCountries.length}</div>
                            <div className="text-sm text-red-700">Affected Countries</div>
                          </div>
                          <div className="text-center">
                            <div className="text-sm font-bold text-red-800">{detection.victimStatistics.firstSeen}</div>
                            <div className="text-sm text-red-700">First Seen</div>
                          </div>
                        </div>
                        <div className="mt-4">
                          <div className="text-sm font-medium text-red-900 mb-2">Affected Regions:</div>
                          <div className="text-sm text-red-800">
                            {detection.victimStatistics.affectedCountries.join(', ')}
                          </div>
                        </div>
                      </div>
                    )}

                    {/* Hash Information */}
                    <div className="bg-gray-50 rounded-lg p-4">
                      <h4 className="text-md font-semibold text-gray-800 mb-3">File Hash Information</h4>
                      <div className="flex items-center justify-between">
                        <div>
                          <span className="text-sm text-gray-600">File Hash:</span>
                          <div className="font-mono text-sm text-gray-900 break-all">{detection.hash}</div>
                        </div>
                        <div className="flex items-center space-x-2">
                          <motion.button
                            onClick={() => copyToClipboard(detection.hash)}
                            className="p-2 text-gray-500 hover:text-gray-700 transition-colors"
                            whileHover={{ scale: 1.1 }}
                            whileTap={{ scale: 0.9 }}
                            title="Copy hash"
                          >
                            <Copy className="w-4 h-4" />
                          </motion.button>
                          <motion.a
                            href={`https://www.virustotal.com/gui/file/${detection.hash}`}
                            target="_blank"
                            rel="noopener noreferrer"
                            className="p-2 text-gray-500 hover:text-gray-700 transition-colors"
                            whileHover={{ scale: 1.1 }}
                            whileTap={{ scale: 0.9 }}
                            title="View on VirusTotal"
                          >
                            <ExternalLink className="w-4 h-4" />
                          </motion.a>
                        </div>
                      </div>
                    </div>
                  </div>
                )}

                {selectedTab === 'behavior' && (
                  <div className="space-y-6">
                    {/* Network Activity */}
                    <div>
                      <h4 className="text-lg font-semibold text-gray-900 mb-4">Network Activity</h4>
                      {detection.behaviorAnalysis.networkActivity.length > 0 ? (
                        <div className="space-y-2">
                          {detection.behaviorAnalysis.networkActivity.map((activity, index) => (
                            <div key={index} className="flex items-center space-x-2 p-3 bg-red-50 border border-red-200 rounded-lg">
                              <Network className="w-4 h-4 text-red-600" />
                              <span className="text-red-800">{activity}</span>
                            </div>
                          ))}
                        </div>
                      ) : (
                        <div className="text-gray-500 text-center py-4">No suspicious network activity detected</div>
                      )}
                    </div>

                    {/* File Operations */}
                    <div>
                      <h4 className="text-lg font-semibold text-gray-900 mb-4">File Operations</h4>
                      {detection.behaviorAnalysis.fileOperations.length > 0 ? (
                        <div className="space-y-2">
                          {detection.behaviorAnalysis.fileOperations.map((operation, index) => (
                            <div key={index} className="flex items-center space-x-2 p-3 bg-orange-50 border border-orange-200 rounded-lg">
                              <FileText className="w-4 h-4 text-orange-600" />
                              <span className="text-orange-800">{operation}</span>
                            </div>
                          ))}
                        </div>
                      ) : (
                        <div className="text-gray-500 text-center py-4">No suspicious file operations detected</div>
                      )}
                    </div>

                    {/* Registry Changes */}
                    <div>
                      <h4 className="text-lg font-semibold text-gray-900 mb-4">Registry Modifications</h4>
                      {detection.behaviorAnalysis.registryChanges.length > 0 ? (
                        <div className="space-y-2">
                          {detection.behaviorAnalysis.registryChanges.map((change, index) => (
                            <div key={index} className="flex items-center space-x-2 p-3 bg-yellow-50 border border-yellow-200 rounded-lg">
                              <Database className="w-4 h-4 text-yellow-600" />
                              <span className="text-yellow-800">{change}</span>
                            </div>
                          ))}
                        </div>
                      ) : (
                        <div className="text-gray-500 text-center py-4">No registry modifications detected</div>
                      )}
                    </div>

                    {/* Advanced Behavior */}
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div className="p-4 bg-purple-50 border border-purple-200 rounded-lg">
                        <div className="text-sm font-medium text-purple-900 mb-2">Process Injection</div>
                        <div className={`text-lg font-bold ${detection.behaviorAnalysis.processInjection ? 'text-red-800' : 'text-green-800'}`}>
                          {detection.behaviorAnalysis.processInjection ? 'DETECTED' : 'NOT DETECTED'}
                        </div>
                      </div>
                      <div className="p-4 bg-blue-50 border border-blue-200 rounded-lg">
                        <div className="text-sm font-medium text-blue-900 mb-2">Persistence Mechanisms</div>
                        <div className="text-sm text-blue-800">
                          {detection.behaviorAnalysis.persistence.length > 0 
                            ? detection.behaviorAnalysis.persistence.join(', ')
                            : 'None detected'
                          }
                        </div>
                      </div>
                    </div>
                  </div>
                )}

                {selectedTab === 'indicators' && (
                  <div className="space-y-6">
                    {/* Domains */}
                    <div>
                      <h4 className="text-lg font-semibold text-gray-900 mb-4">Malicious Domains</h4>
                      {detection.indicators.domains.length > 0 ? (
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-2">
                          {detection.indicators.domains.map((domain, index) => (
                            <div key={index} className="p-3 bg-red-50 border border-red-200 rounded-lg font-mono text-sm">
                              {domain}
                            </div>
                          ))}
                        </div>
                      ) : (
                        <div className="text-gray-500 text-center py-4">No malicious domains identified</div>
                      )}
                    </div>

                    {/* IP Addresses */}
                    <div>
                      <h4 className="text-lg font-semibold text-gray-900 mb-4">IP Addresses</h4>
                      {detection.indicators.ips.length > 0 ? (
                        <div className="grid grid-cols-1 md:grid-cols-3 gap-2">
                          {detection.indicators.ips.map((ip, index) => (
                            <div key={index} className="p-3 bg-orange-50 border border-orange-200 rounded-lg font-mono text-sm">
                              {ip}
                            </div>
                          ))}
                        </div>
                      ) : (
                        <div className="text-gray-500 text-center py-4">No malicious IP addresses identified</div>
                      )}
                    </div>

                    {/* Wallet Addresses */}
                    <div>
                      <h4 className="text-lg font-semibold text-gray-900 mb-4">Cryptocurrency Addresses</h4>
                      {detection.indicators.walletAddresses.length > 0 ? (
                        <div className="space-y-2">
                          {detection.indicators.walletAddresses.map((address, index) => (
                            <div key={index} className="p-3 bg-yellow-50 border border-yellow-200 rounded-lg font-mono text-sm">
                              {address}
                            </div>
                          ))}
                        </div>
                      ) : (
                        <div className="text-gray-500 text-center py-4">No cryptocurrency addresses identified</div>
                      )}
                    </div>

                    {/* File Hashes */}
                    <div>
                      <h4 className="text-lg font-semibold text-gray-900 mb-4">Related File Hashes</h4>
                      {detection.indicators.fileHashes.length > 0 ? (
                        <div className="space-y-2">
                          {detection.indicators.fileHashes.map((hash, index) => (
                            <div key={index} className="p-3 bg-blue-50 border border-blue-200 rounded-lg font-mono text-sm">
                              {hash}
                            </div>
                          ))}
                        </div>
                      ) : (
                        <div className="text-gray-500 text-center py-4">No related file hashes identified</div>
                      )}
                    </div>

                    {/* Mutexes */}
                    <div>
                      <h4 className="text-lg font-semibold text-gray-900 mb-4">Mutex Objects</h4>
                      {detection.indicators.mutexes.length > 0 ? (
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-2">
                          {detection.indicators.mutexes.map((mutex, index) => (
                            <div key={index} className="p-3 bg-purple-50 border border-purple-200 rounded-lg font-mono text-sm">
                              {mutex}
                            </div>
                          ))}
                        </div>
                      ) : (
                        <div className="text-gray-500 text-center py-4">No mutex objects identified</div>
                      )}
                    </div>
                  </div>
                )}

                {selectedTab === 'mitigation' && (
                  <div className="space-y-6">
                    {/* Removal Instructions */}
                    {detection.mitigation.removeInstructions.length > 0 && (
                      <div>
                        <h4 className="text-lg font-semibold text-gray-900 mb-4">Removal Instructions</h4>
                        <div className="space-y-2">
                          {detection.mitigation.removeInstructions.map((instruction, index) => (
                            <div key={index} className="flex items-start space-x-2 p-3 bg-red-50 border border-red-200 rounded-lg">
                              <span className="bg-red-100 text-red-800 rounded-full w-6 h-6 flex items-center justify-center text-xs font-bold mt-0.5">
                                {index + 1}
                              </span>
                              <span className="text-red-800">{instruction}</span>
                            </div>
                          ))}
                        </div>
                      </div>
                    )}

                    {/* Prevention Tips */}
                    <div>
                      <h4 className="text-lg font-semibold text-gray-900 mb-4">Prevention Tips</h4>
                      <div className="space-y-2">
                        {detection.mitigation.preventionTips.map((tip, index) => (
                          <div key={index} className="flex items-center space-x-2 p-3 bg-blue-50 border border-blue-200 rounded-lg">
                            <CheckCircle className="w-4 h-4 text-blue-600" />
                            <span className="text-blue-800">{tip}</span>
                          </div>
                        ))}
                      </div>
                    </div>

                    {/* Recovery Steps */}
                    {detection.mitigation.recoverySteps.length > 0 && (
                      <div>
                        <h4 className="text-lg font-semibold text-gray-900 mb-4">Recovery Steps</h4>
                        <div className="space-y-2">
                          {detection.mitigation.recoverySteps.map((step, index) => (
                            <div key={index} className="flex items-start space-x-2 p-3 bg-green-50 border border-green-200 rounded-lg">
                              <span className="bg-green-100 text-green-800 rounded-full w-6 h-6 flex items-center justify-center text-xs font-bold mt-0.5">
                                {index + 1}
                              </span>
                              <span className="text-green-800">{step}</span>
                            </div>
                          ))}
                        </div>
                      </div>
                    )}
                  </div>
                )}
              </div>
            </div>

            {/* External Analysis Tools */}
            <div className="bg-gray-50 rounded-lg p-4 border border-gray-200">
              <h4 className="text-md font-semibold text-gray-800 mb-3">External Malware Analysis Tools</h4>
              <div className="grid grid-cols-1 md:grid-cols-4 gap-3">
                <motion.a
                  href={`https://www.virustotal.com/gui/file/${detection.hash}`}
                  target="_blank"
                  rel="noopener noreferrer"
                  className="flex items-center space-x-2 p-3 bg-white border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors"
                  whileHover={{ scale: 1.02 }}
                  whileTap={{ scale: 0.98 }}
                >
                  <ExternalLink className="w-4 h-4 text-blue-600" />
                  <span className="text-sm font-medium">VirusTotal</span>
                </motion.a>
                <motion.a
                  href={`https://www.hybrid-analysis.com/search?query=${detection.hash}`}
                  target="_blank"
                  rel="noopener noreferrer"
                  className="flex items-center space-x-2 p-3 bg-white border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors"
                  whileHover={{ scale: 1.02 }}
                  whileTap={{ scale: 0.98 }}
                >
                  <ExternalLink className="w-4 h-4 text-purple-600" />
                  <span className="text-sm font-medium">Hybrid Analysis</span>
                </motion.a>
                <motion.a
                  href={`https://www.joesandbox.com/search?q=${detection.hash}`}
                  target="_blank"
                  rel="noopener noreferrer"
                  className="flex items-center space-x-2 p-3 bg-white border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors"
                  whileHover={{ scale: 1.02 }}
                  whileTap={{ scale: 0.98 }}
                >
                  <ExternalLink className="w-4 h-4 text-green-600" />
                  <span className="text-sm font-medium">Joe Sandbox</span>
                </motion.a>
                <motion.a
                  href={`https://malware.reversinglabs.com/search?query=${detection.hash}`}
                  target="_blank"
                  rel="noopener noreferrer"
                  className="flex items-center space-x-2 p-3 bg-white border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors"
                  whileHover={{ scale: 1.02 }}
                  whileTap={{ scale: 0.98 }}
                >
                  <ExternalLink className="w-4 h-4 text-orange-600" />
                  <span className="text-sm font-medium">ReversingLabs</span>
                </motion.a>
              </div>
            </div>
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  );
};

export default MalwareDetectionPage;